# -*- coding: utf-8 -*-
"""Evaluation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    <<<Used to be the link to Colab file>>>
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/drive')


! git fetch
! git pull

! pip install opennmt-py==1.2.0
! pip install sacrebleu
! pip install sentencepiece
! pip install langdetect
! pip install py-rouge

import nltk
nltk.download('punkt')

from src.transformer_layers import Transformer
from src.utils import *
from src.text_preprocessing import create_models
import torch
import torch.nn as nn
import torch.nn.functional as F
from math import sqrt
Tensor = torch.Tensor
from torch.autograd import Variable
from typing import Optional
import datetime
import time
import numpy as np
import pickle
import sentencepiece as spm
from tqdm import tqdm
from tqdm.notebook import tnrange
import sacrebleu
from src.opt import Opt
from eval.evaluate import *
opt = Opt.get_instance()

from scipy.stats import kendalltau, pearsonr
from copy import deepcopy
import matplotlib.pyplot as plt

opt.model_num = 110000
opt.proper_method = False
get_scores()



def print_rouge(rouge_score, space=4):
    for r in rouge_score:
        print(f'{" "*space}{r}: ', end='')
        temp_dict = rouge_score[r]
        # for i in temp_dict:
        #     temp_dict[i] = '%.3f'%temp_dict[i]

        # print(temp_dict)
        print('%.3f'%temp_dict['f'])

def print_latex_table(rouge_score, temp):
    t = []
    t.append(f"{rouge_score['rouge-1']['f']*100:.1f}")
    t.append(f"{rouge_score['rouge-2']['f']*100:.1f}")
    t.append(f"{rouge_score['rouge-l']['f']*100:.1f}")
    t.append(f"{rouge_score['rouge-w']['f']*100:.1f}")
    temp.append('$' + "\;|\;".join(t) + '$')
    for r in rouge_score:
        v = '%.3f'% rouge_score[r]['f']



def pretty_print():
    opt = Opt.get_instance()
    scores = get_scores()
    # print(scores['bleu'])
    bleu: sacrebleu.BLEUScore = scores['bleu']
    print(bleu)
    opt.temp.append(f'{bleu.score:.2f}')
    print_latex_table(scores['rouge-crowd::trans-then-sum'], opt.temp)
    # for t in scores:
    #     if t == 'bleu': continue
    #     print_latex_table(scores[t], opt.temp)
    #     print(t.upper())
    #     print_rouge(scores[t])
    opt.table.append(' & '.join(opt.temp))

src_langs = ['de', 'es', 'fr']
model_nums = {'de':[5, 10, 20, 40, 60 , 80],
              'es':[5, 10, 20, 60, 80, 110],
              'fr':[6, 12, 18, 33, 48, 72]}
epoch_size = {'de': 41.3/2, 'es':35.4/2, 'fr':9.1}
model_fracs = {i:['%.2f'%(j/epoch_size[i]) for j in model_nums[i]] for i in model_nums}
model_nums = {lang: [i*1000 for i in model_nums[lang]] for lang in model_nums}
opt.proper_method = False

opt = Opt.get_instance()
t = {'model_num':[], 'bleu':[], '1': [], '2': [], 'l': [], 'w': []}
final_output = {'de': deepcopy(t),
                'fr': deepcopy(t),
                'es': deepcopy(t)}

for lang in src_langs:
    for i, model_num in enumerate(model_nums[lang]):
        opt.src_lang = lang
        opt.model_num = model_num
        scores = get_scores()
        final_output[lang]['model_num'].append(model_num)
        final_output[lang]['bleu'].append(scores['bleu'].score)
        temp = scores['rouge-crowd::trans-then-sum']
        final_output[lang]['1'].append(temp['rouge-1']['f'])
        final_output[lang]['2'].append(temp['rouge-2']['f'])
        final_output[lang]['l'].append(temp['rouge-l']['f'])
        final_output[lang]['w'].append(temp['rouge-w']['f'])

final_output

# Kendall analysis
endst = ' & '
newline = '\\\\\n'
for lang in src_lang:
    print(lang, end=endst)
    
    k, _ = kendalltau(temp['bleu'], temp['1'])
    print(f'{k:.3f}', end=endst)
    k, _ = kendalltau(temp['bleu'], temp['2'])
    print(f'{k:.3f}', end=endst)
    k, _ = kendalltau(temp['bleu'], temp['l'])
    print(f'{k:.3f}', end=endst)
    k, _ = kendalltau(temp['bleu'], temp['w'])
    print(f'{k:.3f}', end=newline)

# Pearson analysis

endst = ' & '
newline = '\\\\\n'
for lang in src_langs:
    print(lang, end=endst)
    temp = final_output[lang]
    print(f"{pearsonr(temp['bleu'], temp['1'])[0]:.3f}", end=endst)
    print(f"{pearsonr(temp['bleu'], temp['2'])[0]:.3f}", end=endst)
    print(f"{pearsonr(temp['bleu'], temp['l'])[0]:.3f}", end=endst)
    print(f"{pearsonr(temp['bleu'], temp['w'])[0]:.3f}", end=newline)

fig, axs = plt.subplots(3, 1, figsize=(6, 18))
# fig.tight_layout()
fig.subplots_adjust(bottom=0.2, top=1)
scatter_type = {'1': '*', '2':'x', 'l':'o', 'w':'+'}
for i, lang in enumerate(src_langs):
    ax = axs[i]
    temp = final_output[lang]
    bleu = temp['bleu']
    for n in ['1', '2', 'l', 'w']:
        x = bleu
        y = temp[n]
        if lang=='fr':
            x = x[2:]
            y = y[2:]
        else:
            x = x[1:]
            y = y[1:]
        ax.plot(x, y, label=f'rouge-{n}')
        ax.scatter(x, y, marker=scatter_type[n])
        ax.set_title(lang, fontsize=20)
        # ax.set_xlabel('BLEU', fontsize=15)
        # ax.set_ylabel('ROUGE', fontsize=15)
        
        x = np.arange(min(x), max(x), 4)
        

        # ax.get_xti
        # print(ax.get_xticklabels())
        # ax.set_xticklabels(ax.get_xticklabels(), fontsize=14)
    ax.legend(fontsize=15)
plt.xlabel('BLEU', fontsize=15)
plt.show()

for lang in model_nums:
    opt.table = []
    # print(f'{"="*50}{lang}{"="*50}')
    for i, model_num in enumerate(model_nums[lang]):
        opt.temp = [f'{model_num:,} ({model_fracs[lang][i]})']
        # print(, end='')
        opt.src_lang = lang
        opt.model_num = model_num
        pretty_print()
        print(opt.temp)
    print()
    print(' \\\\\n'.join(opt.table) + "\\\\")
    print()

data = {
    'fr': {
        'ref':(18.19, (36.4, 13., 33.2, 13.6), (32.6, 7.6, 27.1, 10.1)),
        'hyp':[
                 (3.09, (23.1,3.5,21.6,7.9), (23.4,3.2,21.3,7.4)),
                 (12.29, (32.4,9.3,29.7,11.8), (30.0,5.9,26.0,9.4))
        ]
    },

    'es': {
        'ref': (26.05, (41.1,18.4,38.4,16.5), (33.6,8.8,28.0,10.6)),
        'hyp': [
                (4.11, (24.9,4.6,23.5,8.7), (24.1,3.5,22.4,7.8)),
                (11.44, (34.3,11.3,32.1,12.9), (30.1,6.2,25.8,9.4))
        ]
    },

    'de': {
        'ref':(16.14, (35.6,12.4,32.0,12.8), (31.4,7.7,26.5,9.9)),
        'hyp': [
                (3.32, (24.7,4.2,23.0,8.3), (23.7,2.9,21.4,7.4)),
                (12.03, (32.9,10.2,30.2,11.7), (30.5,6.9,26.1,9.5))
        ]
    }
}

for lang in data:
    item = data[lang]
    ref = item['ref']
    ref_bleu, ref_rouge1, ref_rouge2 = ref
    for hyp in item['hyp']:
        hyp_bleu, hyp_rouge1, hyp_rouge2 = hyp
        diff = ref_bleu - hyp_bleu
        print(lang)
        print('%.2f'%diff, end=" & ")
        r = (r-h for r, h in zip(ref_rouge1, hyp_rouge1))
        r = (f'{i/diff:.2f}' for i in r)
        print( "$" + '\\;|\\;'.join(r) + "$", end=" & ")

        r = (r-h for r, h in zip(ref_rouge2, hyp_rouge2))
        r = (f'{i/diff:.2f}' for i in r)
        print( "$" + '\\;|\\;'.join(r) + "$", end='\\\\\n')

