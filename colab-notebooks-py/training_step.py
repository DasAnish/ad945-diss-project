# -*- coding: utf-8 -*-
"""Training_step.ipynb

Automatically generated by Colaboratory.

Original file is located at
    <<<Used to be the link to the colab file>>>
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
import os
if not os.path.exists('/content/drive'): drive.mount('/content/drive')

!pip install sacrebleu
!pip install sentencepiece
!pip install py-rouge

import torch

import time
import numpy as np
import pickle

import sentencepiece as spm
from tqdm.notebook import tnrange
import sacrebleu
from datetime import datetime

from src.opt import Opt
from src.transformer_layers import Transformer
from src.utils import *
# from src.save_load import *
from src.training import *

opt = Opt()

if not os.path.exists(f"{opt.model_file}{opt.src_lang}.model"):
    move(opt)

# Commented out IPython magic to ensure Python compatibility.
if not os.path.exists(f"{opt.model_file}{opt.src_lang}.model"):
#     % cd sentencepiece/
#     % cd build/
    ! cmake ..
    ! make -j $(nproc)
    ! sudo make install
    ! sudo ldconfig -v

if not os.path.exists(f"{opt.model_file}{opt.src_lang}.model"):
    print('building src processor') 
    ! spm_train --input={opt.interim_file}{opt.src_lang} \
    --model_prefix={opt.model_file}{opt.src_lang}.model \
    --vocab_size=8000 --character_coverage=1.0 \
    --model_type=bpe --pad_id=3 --bos_id=-1 \
    --eos_id=-1

    
if not os.path.exists(f"{opt.model_file}{opt.trg_lang}.model"):
    print('building trg processor')
    ! spm_train --input={opt.interim_file}{opt.trg_lang} \
    --model_prefix={opt.model_file}{opt.trg_lang}.model \
    --vocab_size=8000 --character_coverage=1.0 \
    --model_type=bpe --pad_id=3

create_models()
create_dataset()

opt.train_len = sum((len(opt.src_bins[v])*v) // opt.tokensize + 1 for v in opt.bins) 
print(opt.train_len)
print(sum(len(opt.src_bins[v]) for v in opt.bins))

load_dev_dataset()

model, optim = load_model()

try:
    opt.k = 10
    opt.print_every = 200 
    opt.save_every = 5000
    opt.epochs = 10
    opt.warmup_steps = 16000
    opt.keep_training = True
    train_model(model)

except Exception as e:
    log.print(e, type=Log.ERROR)
    log.flush()
    raise e